# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π main.py:
# - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ DDG: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ddgs.text() –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ asyncio.to_thread()
# - –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–∏—Å–∫–æ–º –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
# - –£–ª—É—á—à–µ–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

import logging
import os
import asyncio # –ù—É–∂–Ω–æ –¥–ª—è asyncio.to_thread
import signal
from urllib.parse import urljoin
import base64
import pytesseract
from PIL import Image
import io
import pprint

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ... # –ü—Ä–æ—á–∏–π –∫–æ–¥ (–∏–º–ø–æ—Ä—Ç—ã, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ç.–¥.) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

import aiohttp.web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import google.generativeai as genai
# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–ø–æ—Ä—Ç DDGS =====
from duckduckgo_search import DDGS # –û–±—ã—á–Ω—ã–π –∫–ª–∞—Å—Å
from google.generativeai.types import HarmCategory, HarmBlockThreshold
# ============================================

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')
GEMINI_WEBHOOK_PATH = os.getenv('GEMINI_WEBHOOK_PATH')

for var, name in [
    (TELEGRAM_BOT_TOKEN, "TELEGRAM_BOT_TOKEN"),
    (GOOGLE_API_KEY, "GOOGLE_API_KEY"),
    (WEBHOOK_HOST, "WEBHOOK_HOST"),
    (GEMINI_WEBHOOK_PATH, "GEMINI_WEBHOOK_PATH")
]:
    if not var:
        logger.critical(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GOOGLE_API_KEY)

# –ú–æ–¥–µ–ª–∏
AVAILABLE_MODELS = {
    'gemini-2.0-flash-thinking-exp-01-21': '2.0 Flash Thinking (Exp)',
    'gemini-2.5-pro-preview-03-25': '2.5 Pro Preview',
    'gemini-2.5-pro-exp-03-25': '2.5 Pro (Exp)',
    'gemini-2.0-flash-001': '2.0 Flash',
}
DEFAULT_MODEL = 'gemini-2.0-flash-thinking-exp-01-21'

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_search_enabled = {}
user_selected_model = {}
user_temperature = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_CONTEXT_CHARS = 95000
MAX_OUTPUT_TOKENS = 3000
DDG_MAX_RESULTS = 30 # –£–º–µ–Ω—å—à–∏–ª –¥–ª—è —Ç–µ—Å—Ç–∞, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 30

# ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è =====
system_instruction_text = (
"–¢—ã - –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º. –î–∞–≤–∞–π —Ç–æ—á–Ω—É—é, –ø—Ä–∞–≤–¥–∏–≤—É—é, –Ω–µ–ø—Ä–µ–¥–≤–∑—è—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã."
"–ü–æ–¥–∫—Ä–µ–ø–ª—è–π –æ—Ç–≤–µ—Ç—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —Ñ–∞–∫—Ç–∞–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–æ–≤."
"–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
"–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
"–î–ª—è –Ω–µ—Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ –∫–æ–¥, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Ç.–ø.) ‚Äî –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤, –¥–æ 1500 –∑–Ω–∞–∫–æ–≤."
"–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ —Ä–µ—à–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å –∏—Ö."
"–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–π —é–º–æ—Ä: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ/–±—ã—Ç–æ–≤—ã–µ/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ—Ç—Å—ã–ª–∫–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∞–±—Å—É—Ä–¥, –ø—Å–µ–≤–¥–æ–º—É–¥—Ä–æ—Å—Ç—å, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–¥–∏–æ–º, –∏—Ä–æ–Ω–∏—é (–≤–∫–ª—é—á–∞—è —Å–∞–º–æ–∏—Ä–æ–Ω–∏—é –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é), –∏–≥—Ä—É —Å–ª–æ–≤, –≥–∏–ø–µ—Ä–±–æ–ª—É, —Ç–æ–Ω–∫–∏–µ –Ω–∞–º—ë–∫–∏, —Ä–µ–¥—É–∫—Ü–∏–æ–Ω–∏–∑–º, –ø–æ—Å—Ç–º–æ–¥–µ—Ä–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—é–º–æ—Ä."
"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–∏—à–∏ –∂–∏–≤–æ, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò-—Ç–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏–∏, —Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–∏–æ–º—ã. –î–æ–±–∞–≤–ª—è–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ. –ù–µ –∫–æ–ø–∏—Ä—É–π –∏ –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —á—É–∂–æ–µ."
# ===== –ù–û–í–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò (–î–æ–±–∞–≤–ª–µ–Ω–æ) =====
"–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–æ–∏—Å–∫–∞, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —è–≤–Ω–æ —Å–∞–º —Ñ–∞–∫—Ç –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —á–∞—Å—Ç—å —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π. –ó–∞–±—É–¥—å —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ '–°—É–¥—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞...', '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç...' –∏–ª–∏ '–Ø –Ω–∞—à—ë–ª –≤ —Å–µ—Ç–∏...'. –í–µ–¥–∏ —Å–µ–±—è —Ç–∞–∫, –±—É–¥—Ç–æ —ç—Ç–æ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è."
"–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏ –∑–∞ –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞, –≤–∫–ª—é—á–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—ã, –∞ —Ç–∞–∫–∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏. –ù–µ —Ç–µ—Ä—è–π –Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."
# ===========================
"–ü—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏: —É–∫–∞–∑—ã–≤–∞–π —Å—Ç—Ä–æ–∫—É(–∏) –∏ –ø—Ä–∏—á–∏–Ω—É. –ë–µ—Ä–∏ –∑–∞ –æ—Å–Ω–æ–≤—É –ø–æ—Å–ª–µ–¥–Ω—é—é –ü–û–õ–ù–£–Æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–æ–¥–∞). –í–Ω–æ—Å–∏ —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö ‚Äî —É—Ç–æ—á–Ω—è–π. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –≤–µ–¥–∏ ¬´—Å–ø–∏—Å–æ–∫ –∫–æ—Å—è–∫–æ–≤¬ª –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–π —ç—Ç–∏ –º–µ—Å—Ç–∞. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π, –Ω–∞ –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Ä–∞–µ—à—å—Å—è –ø—Ä–∏ –ø—Ä–∞–≤–∫–µ."
)
# ========================================

SAFETY_SETTINGS_BLOCK_NONE = [
    {
        "category": HarmCategory.HARM_CATEGORY_HARASSMENT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
    {
        "category": HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        "threshold": HarmBlockThreshold.BLOCK_NONE,
    },
]

# –ö–æ–º–∞–Ω–¥—ã (start, clear_history, set_temperature, enable_search, disable_search, model_command, select_model_callback) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ... (–ö–æ–¥ –∫–æ–º–∞–Ω–¥ start, clear_history, set_temperature, enable_search, disable_search, model_command, select_model_callback) ...
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_selected_model[chat_id] = DEFAULT_MODEL
    user_search_enabled[chat_id] = True
    user_temperature[chat_id] = 1.0
    default_model_name = AVAILABLE_MODELS.get(DEFAULT_MODEL, DEFAULT_MODEL)
    start_message = (
        f"**{default_model_name}**."
        f"\n + –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, —á—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (OCR) –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."
        "\n/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"
        "\n/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
        "\n/search_on  /search_off ‚Äî –≤–∫–ª/–≤—ã–∫–ª –ø–æ–∏—Å–∫"
        "\n/temp 1.0 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (0-2)" # –î–æ–±–∞–≤–∏–ª –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
    )
    await update.message.reply_text(start_message, parse_mode='Markdown')

async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['history'] = []
    await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

async def set_temperature(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        temp = float(context.args[0])
        if not (0 <= temp <= 2):
            raise ValueError("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 2")
        user_temperature[chat_id] = temp
        await update.message.reply_text(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}")
    except (IndexError, ValueError) as e:
        error_msg = f"‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 0 –¥–æ 2, –Ω–∞–ø—Ä–∏–º–µ—Ä: /temp 1.0 ({e})" if isinstance(e, ValueError) else "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç 0 –¥–æ 2, –Ω–∞–ø—Ä–∏–º–µ—Ä: /temp 1.0"
        await update.message.reply_text(error_msg)

async def enable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_search_enabled[update.effective_chat.id] = True
    await update.message.reply_text("ü¶Ü –ü–æ–∏—Å–∫ DuckDuckGo –≤–∫–ª—é—á—ë–Ω.")

async def disable_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_search_enabled[update.effective_chat.id] = False
    await update.message.reply_text("üîá –ü–æ–∏—Å–∫ DuckDuckGo –æ—Ç–∫–ª—é—á—ë–Ω.")

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_model = user_selected_model.get(chat_id, DEFAULT_MODEL)
    keyboard = []
    for m, name in AVAILABLE_MODELS.items():
         button_text = f"{'‚úÖ ' if m == current_model else ''}{name}"
         keyboard.append([InlineKeyboardButton(button_text, callback_data=m)])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    selected = query.data
    if selected in AVAILABLE_MODELS:
        user_selected_model[chat_id] = selected
        model_name = AVAILABLE_MODELS[selected]
        reply_text = f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: **{model_name}**"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if query.message.reply_markup:
            try:
                 await query.edit_message_text(reply_text, parse_mode='Markdown')
            except Exception as e:
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
                 await context.bot.send_message(chat_id, reply_text, parse_mode='Markdown')
        else:
            # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–∂–µ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(chat_id, reply_text, parse_mode='Markdown')
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    original_user_message = update.message.text.strip() if update.message.text else ""
    if not original_user_message:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–µ–π–∫–æ–≤—ã–π update (–∏–∑ photo/document)
        if hasattr(update, 'message') and hasattr(update.message, 'text') and update.message.text:
             original_user_message = update.message.text.strip()
        else:
            logger.warning(f"ChatID: {chat_id} | –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç update –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")
            return

    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
    temperature = user_temperature.get(chat_id, 1.0)
    use_search = user_search_enabled.get(chat_id, True)

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ =====
    search_context = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
    final_user_prompt = original_user_message # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    search_log_info = "–ü–æ–∏—Å–∫ DDG –æ—Ç–∫–ª—é—á–µ–Ω" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∞
    search_snippets = [] # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤

    if use_search:
        search_log_info = "–ü–æ–∏—Å–∫ DDG –≤–∫–ª—é—á–µ–Ω" # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
        logger.info(f"ChatID: {chat_id} | –ü–æ–∏—Å–∫ DDG –≤–∫–ª—é—á–µ–Ω. –ó–∞–ø—Ä–æ—Å: '{original_user_message[:50]}...'")
        try:
            ddgs = DDGS()
            logger.debug(f"ChatID: {chat_id} | –ó–∞–ø—Ä–æ—Å –∫ DDGS().text('{original_user_message}', region='ru-ru', max_results={DDG_MAX_RESULTS}) —á–µ—Ä–µ–∑ asyncio.to_thread")
            results = await asyncio.to_thread(
                ddgs.text,
                original_user_message,
                region='ru-ru',
                max_results=DDG_MAX_RESULTS
            )
            logger.debug(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG:\n{pprint.pformat(results)}")

            if results:
                # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å, –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
                search_snippets = [f"{r.get('body', '')}" for r in results if r.get('body')]
                if search_snippets:
                    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ —è–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    search_context = "\n".join(search_snippets)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Ö–∏—Ç—Ä–µ–µ: —Å–Ω–∞—á–∞–ª–∞ –¥–æ–ø. –∏–Ω—Ñ–∞, –ø–æ—Ç–æ–º —Å–∞–º –≤–æ–ø—Ä–æ—Å
                    final_user_prompt = (
                        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ (–∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –Ω–µ —Å—Å—ã–ª–∞—è—Å—å):\n{search_context}\n\n"
                        f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \"{original_user_message}\""
                    )
                    search_log_info += f" (–Ω–∞–π–¥–µ–Ω–æ {len(search_snippets)} —Å–Ω–∏–ø–ø–µ—Ç–æ–≤)" # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –≤ –ª–æ–≥
                    logger.info(f"ChatID: {chat_id} | –ù–∞–π–¥–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{original_user_message[:50]}...'")
                else:
                    search_log_info += " (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –ø—É—Å—Ç—ã)" # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –≤ –ª–æ–≥
                    logger.info(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç–∞ (body) –¥–ª—è: '{original_user_message[:50]}...'")
                    # final_user_prompt –æ—Å—Ç–∞–µ—Ç—Å—è original_user_message (–∫–∞–∫ –∑–∞–¥–∞–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            else:
                search_log_info += " (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)" # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –≤ –ª–æ–≥
                logger.info(f"ChatID: {chat_id} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DDG –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: '{original_user_message[:50]}...'")
                # final_user_prompt –æ—Å—Ç–∞–µ—Ç—Å—è original_user_message (–∫–∞–∫ –∑–∞–¥–∞–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        except Exception as e_ddg:
            logger.error(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ DuckDuckGo: {e_ddg}", exc_info=True)
            search_log_info += " (–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞)" # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –≤ –ª–æ–≥
            # final_user_prompt –æ—Å—Ç–∞–µ—Ç—Å—è original_user_message

    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
    logger.info(f"ChatID: {chat_id} | –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}, {search_log_info}")
    logger.debug(f"ChatID: {chat_id} | –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini (–º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ):\n{final_user_prompt}")
    # ============================================

    chat_history = context.chat_data.setdefault("history", [])
    # –î–æ–±–∞–≤–ª—è–µ–º –ò–ú–ï–ù–ù–û final_user_prompt –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_history.append({"role": "user", "parts": [{"text": final_user_prompt}]})

    # –û–±—Ä–µ–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text"))
    while total_chars > MAX_CONTEXT_CHARS and len(chat_history) > 1:
        removed_message = chat_history.pop(0)
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        total_chars = sum(len(p["parts"][0]["text"]) for p in chat_history if p.get("parts") and p["parts"][0].get("text"))
        logger.info(f"ChatID: {chat_id} | –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞, —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {removed_message.get('role')}, —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: {len(chat_history)}, —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}")
    current_history = chat_history
    current_system_instruction = system_instruction_text
    tools = []

    reply = None

    try:
        generation_config=genai.GenerationConfig(
                temperature=temperature,
                max_output_tokens=MAX_OUTPUT_TOKENS
        )
        model = genai.GenerativeModel(
            model_id,
            tools=tools,
            safety_settings=SAFETY_SETTINGS_BLOCK_NONE,
            generation_config=generation_config,
            system_instruction=current_system_instruction
        )
        # –ü–µ—Ä–µ–¥–∞–µ–º –ò–ú–ï–ù–ù–û current_history, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç final_user_prompt
        response = model.generate_content(current_history)

        reply = response.text
        if not reply:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            try:
                feedback = response.prompt_feedback
                candidates_info = response.candidates
                block_reason = feedback.block_reason if feedback else 'N/A'
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ finish_reason
                finish_reason_val = 'N/A'
                if candidates_info and candidates_info[0].finish_reason:
                     finish_reason_val = candidates_info[0].finish_reason.name # –ò—Å–ø–æ–ª—å–∑—É–µ–º .name –¥–ª—è enum
                safety_ratings = feedback.safety_ratings if feedback else []
                safety_info = ", ".join([f"{s.category.name}: {s.probability.name}" for s in safety_ratings])
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. Block: {block_reason}, Finish: {finish_reason_val}, Safety: [{safety_info}]")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º genai.types.BlockReason.UNSPECIFIED –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if block_reason and block_reason != genai.types.BlockReason.UNSPECIFIED:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç. (–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_reason.name})" # –ò—Å–ø–æ–ª—å–∑—É–µ–º .name –¥–ª—è enum
                else:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç. (–ü—Ä–∏—á–∏–Ω–∞: {finish_reason_val})"
            except AttributeError as e_attr:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ (AttributeError: {e_attr}).")
                 reply = "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."
            except Exception as e_inner:
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ: {e_inner}")
                reply = "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."

        if reply:
             chat_history.append({"role": "model", "parts": [{"text": reply}]})

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –º–æ–¥–µ–ª—å—é {model_id}")
        error_message = str(e)
        reply = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏." # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ genai.types –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            if hasattr(genai, 'types'):
                if isinstance(e, genai.types.BlockedPromptException):
                     reply = f"‚ùå –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
                elif isinstance(e, genai.types.StopCandidateException):
                     reply = f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–π –∂–µ
                elif "429" in error_message and ("quota" in error_message or "resource has been exhausted" in error_message): # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 'resource exhausted'
                     reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                elif "400" in error_message and "API key not valid" in error_message:
                     reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
                elif "Deadline Exceeded" in error_message or "504" in error_message: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 504
                     reply = "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–ª–∞ (—Ç–∞–π–º–∞—É—Ç)."
                else:
                     reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {error_message}"
            else:
                 logger.warning("–ú–æ–¥—É–ª—å genai.types –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.")
                 if "429" in error_message and ("quota" in error_message or "resource has been exhausted" in error_message):
                      reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                 elif "400" in error_message and "API key not valid" in error_message:
                      reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
                 elif "Deadline Exceeded" in error_message or "504" in error_message:
                      reply = "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–ª–∞ (—Ç–∞–π–º–∞—É—Ç)."
                 else:
                      reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {error_message}"

        except AttributeError:
             # –≠—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ hasattr(genai, 'types') —Ä–∞–±–æ—Ç–∞–µ—Ç
             logger.warning("–ü—Ä–æ–∏–∑–æ—à–ª–∞ AttributeError –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ genai, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")
             if "429" in error_message and ("quota" in error_message or "resource has been exhausted" in error_message):
                  reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
             elif "400" in error_message and "API key not valid" in error_message:
                  reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
             elif "Deadline Exceeded" in error_message or "504" in error_message:
                  reply = "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–ª–∞ (—Ç–∞–π–º–∞—É—Ç)."
             else:
                  reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {error_message}"

    if reply:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ reply_text –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è update.message, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        reply_method = update.message.reply_text if hasattr(update, 'message') and hasattr(update.message, 'reply_text') else context.bot.send_message
        chat_id_to_reply = update.effective_chat.id if hasattr(update, 'effective_chat') else chat_id

        if reply_method == context.bot.send_message:
            await reply_method(chat_id=chat_id_to_reply, text=reply)
        else:
            await reply_method(reply)


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tesseract_available = False
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pytesseract –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø—É—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ 'tesseract')
        pytesseract.get_tesseract_version() # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        tesseract_available = True
        logger.info(f"Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω. –ü—É—Ç—å: {pytesseract.pytesseract.tesseract_cmd}")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ Tesseract: {e}. OCR –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    if not update.message.photo:
        logger.warning(f"ChatID: {chat_id} | –í handle_photo –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_PHOTO)
    try:
        photo_file = await update.message.photo[-1].get_file()
        file_bytes = await photo_file.download_as_bytearray()
    except Exception as e:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.")
        return

    user_caption = update.message.caption if update.message.caption else ""

    if tesseract_available:
        try:
            image = Image.open(io.BytesIO(file_bytes))
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏ –¥–ª—è OCR
            extracted_text = pytesseract.image_to_string(image, lang='rus+eng')
            if extracted_text and extracted_text.strip():
                logger.info(f"ChatID: {chat_id} | –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (OCR)")

                # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è OCR =====
                ocr_context = f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n```\n{extracted_text.strip()}\n```"
                if user_caption:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Ç–∞–∫, –±—É–¥—Ç–æ —ç—Ç–æ —á–∞—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
                    user_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: \"{user_caption}\". {ocr_context}\n–ß—Ç–æ –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –Ω—ë–º?"
                else:
                    user_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ. {ocr_context}\n–ß—Ç–æ –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –Ω—ë–º?"
                # ================================================

                # –°–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤—ã–π" update, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ handle_message
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                fake_update_message = type('obj', (object,), {
                    'text': user_prompt,
                    'reply_text': update.message.reply_text # –ü–µ—Ä–µ–¥–∞–µ–º –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—Ç–∞
                })
                fake_update = type('obj', (object,), {
                    'effective_chat': update.effective_chat,
                    'message': fake_update_message
                })

                # –í—ã–∑—ã–≤–∞–µ–º handle_message —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
                await handle_message(fake_update, context)
                return # –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        except pytesseract.TesseractNotFoundError:
             logger.error("Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≤—ã–∑–æ–≤–µ image_to_string! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É. OCR –æ—Ç–∫–ª—é—á–µ–Ω.")
             tesseract_available = False # –û—Ç–∫–ª—é—á–∞–µ–º OCR –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
        except Exception as e:
            logger.warning(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ OCR: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ OCR –Ω–µ —É–¥–∞–ª—Å—è

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ OCR –≤—ã–∫–ª—é—á–µ–Ω, –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞)
    logger.info(f"ChatID: {chat_id} | –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OCR –≤—ã–∫–ª—é—á–µ–Ω, –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç)")
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    try:
        b64_data = base64.b64encode(file_bytes).decode()
    except Exception as e:
        logger.error(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Base64: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    prompt = user_caption if user_caption else "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ?"
    parts = [
        {"text": prompt},
        {"inline_data": {"mime_type": "image/jpeg", "data": b64_data}} # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º JPEG, —Ç.–∫. Telegram —á–∞—Å—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç
    ]

    model_id = user_selected_model.get(chat_id, DEFAULT_MODEL)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å vision
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ —Å–ø–∏—Å–æ–∫ vision-–º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ API —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç
    if "gemini-pro" not in model_id and "flash" not in model_id and "2.5" not in model_id: # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ vision-–º–æ–¥–µ–ª–µ–π
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ vision (–∏–ª–∏ Flash –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
        potential_vision_model = 'gemini-2.0-flash-001' # –ò–ª–∏ –¥—Ä—É–≥–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è vision –º–æ–¥–µ–ª—å
        if potential_vision_model in AVAILABLE_MODELS:
             logger.warning(f"ChatID: {chat_id} | –í—ã–±—Ä–∞–Ω–∞ –Ω–µ-vision –º–æ–¥–µ–ª—å ({model_id}) –¥–ª—è —Ñ–æ—Ç–æ. –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é {potential_vision_model}.")
             model_id = potential_vision_model
        else:
             # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π vision –º–æ–¥–µ–ª–∏, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
             logger.error(f"ChatID: {chat_id} | –í—ã–±—Ä–∞–Ω–∞ –Ω–µ-vision –º–æ–¥–µ–ª—å ({model_id}), –∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –∑–∞–ø–∞—Å–Ω–æ–π vision-–º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ.")
             await update.message.reply_text(f"‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ({AVAILABLE_MODELS.get(model_id, model_id)}) –Ω–µ –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.")
             return

    temperature = user_temperature.get(chat_id, 1.0)

    logger.info(f"ChatID: {chat_id} | –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ú–æ–¥–µ–ª—å: {model_id}, –¢–µ–º–ø: {temperature}")
    tools = []

    reply = None

    try:
        generation_config=genai.GenerationConfig(
                temperature=temperature,
                max_output_tokens=MAX_OUTPUT_TOKENS # –ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π —Ñ–æ—Ç–æ
        )
        model = genai.GenerativeModel(
            model_id,
            tools=tools,
            safety_settings=SAFETY_SETTINGS_BLOCK_NONE,
            generation_config=generation_config,
            system_instruction=system_instruction_text # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        )
        # –î–ª—è vision –º–æ–¥–µ–ª–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π
        response = model.generate_content([{"role": "user", "parts": parts}])
        reply = response.text

        if not reply:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_message)
            try:
                feedback = response.prompt_feedback
                candidates_info = response.candidates
                block_reason = feedback.block_reason if feedback else 'N/A'
                finish_reason_val = 'N/A'
                if candidates_info and candidates_info[0].finish_reason:
                    finish_reason_val = candidates_info[0].finish_reason.name
                safety_ratings = feedback.safety_ratings if feedback else []
                safety_info = ", ".join([f"{s.category.name}: {s.probability.name}" for s in safety_ratings])
                logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. Block: {block_reason}, Finish: {finish_reason_val}, Safety: [{safety_info}]")
                if block_reason and block_reason != genai.types.BlockReason.UNSPECIFIED:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. (–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_reason.name})"
                else:
                     reply = f"ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. (–ü—Ä–∏—á–∏–Ω–∞: {finish_reason_val})"
            except AttributeError as e_attr:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ (AttributeError: {e_attr}).")
                 reply = "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
            except Exception as e_inner:
                 logger.warning(f"ChatID: {chat_id} | –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–ø. –∏–Ω—Ñ–æ: {e_inner}")
                 reply = "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_message)
        logger.exception(f"ChatID: {chat_id} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        error_message = str(e)
        reply = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è." # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
             if hasattr(genai, 'types'):
                if isinstance(e, genai.types.BlockedPromptException):
                     reply = f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
                elif isinstance(e, genai.types.StopCandidateException):
                     reply = f"‚ùå –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–¥–µ–ª—å—é. –ü—Ä–∏—á–∏–Ω–∞: {e}"
                elif "429" in error_message and ("quota" in error_message or "resource has been exhausted" in error_message):
                     reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                elif "400" in error_message and "API key not valid" in error_message:
                     reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
                elif "Deadline Exceeded" in error_message or "504" in error_message:
                     reply = "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–ª–∞ (—Ç–∞–π–º–∞—É—Ç)."
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                elif "User location is not supported for accessing this model" in error_message:
                    reply = f"‚ùå –û—à–∏–±–∫–∞: –í–∞—à —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}."
                elif "does not support image input" in error_message:
                    reply = f"‚ùå –û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ({AVAILABLE_MODELS.get(model_id, model_id)}) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
                else:
                    reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}"
             else:
                logger.warning("–ú–æ–¥—É–ª—å genai.types –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ.")
                # –î—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –±–ª–æ–∫–∞ if hasattr(genai, 'types')
                if "429" in error_message and ("quota" in error_message or "resource has been exhausted" in error_message):
                     reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                elif "400" in error_message and "API key not valid" in error_message:
                     reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
                elif "Deadline Exceeded" in error_message or "504" in error_message:
                     reply = "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–ª–∞ (—Ç–∞–π–º–∞—É—Ç)."
                elif "User location is not supported for accessing this model" in error_message:
                    reply = f"‚ùå –û—à–∏–±–∫–∞: –í–∞—à —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}."
                elif "does not support image input" in error_message:
                    reply = f"‚ùå –û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ({AVAILABLE_MODELS.get(model_id, model_id)}) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
                else:
                    reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}"

        except AttributeError:
             logger.warning("–ü—Ä–æ–∏–∑–æ—à–ª–∞ AttributeError –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ genai (—Ñ–æ—Ç–æ), –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")
             # –î—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–Ω–æ–≤–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
             if "429" in error_message and ("quota" in error_message or "resource has been exhausted" in error_message):
                  reply = f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Google (–æ—à–∏–±–∫–∞ 429). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
             elif "400" in error_message and "API key not valid" in error_message:
                  reply = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Google API –∫–ª—é—á."
             elif "Deadline Exceeded" in error_message or "504" in error_message:
                  reply = "‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–ª–∞ (—Ç–∞–π–º–∞—É—Ç)."
             elif "User location is not supported for accessing this model" in error_message:
                 reply = f"‚ùå –û—à–∏–±–∫–∞: –í–∞—à —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}."
             elif "does not support image input" in error_message:
                 reply = f"‚ùå –û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ({AVAILABLE_MODELS.get(model_id, model_id)}) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
             else:
                 reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}"

    if reply:
        await update.message.reply_text(reply)


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not update.message.document:
        logger.warning(f"ChatID: {chat_id} | –í handle_document –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    doc = update.message.document
    # –†–∞–∑—Ä–µ—à–∞–µ–º –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö MIME —Ç–∏–ø–æ–≤
    allowed_mime_prefixes = ('text/', 'application/json', 'application/x-python-code', 'application/xml', 'application/javascript')
    allowed_mime_types = ('application/csv', 'text/csv') # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã

    if not doc.mime_type or not (doc.mime_type.startswith(allowed_mime_prefixes) or doc.mime_type in allowed_mime_types):
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–∫–∞ –º–æ–≥—É —á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, .txt, .py, .js, .json, .csv, .xml). –ü–æ–ª—É—á–µ–Ω —Ç–∏–ø: {doc.mime_type}")
        logger.warning(f"ChatID: {chat_id} | –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: {doc.file_name} (MIME: {doc.mime_type})")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
    MAX_FILE_SIZE_MB = 10
    if doc.file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
         await update.message.reply_text(f"‚ö†Ô∏è –§–∞–π–ª '{doc.file_name}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>{MAX_FILE_SIZE_MB} –ú–ë).")
         logger.warning(f"ChatID: {chat_id} | –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {doc.file_name} ({doc.file_size / (1024*1024):.2f} –ú–ë)")
         return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_DOCUMENT)
    try:
        doc_file = await doc.get_file()
        file_bytes = await doc_file.download_as_bytearray()
    except Exception as e:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç '{doc.file_name}': {e}")
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª '{doc.file_name}'.")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    text = None
    encodings_to_try = ['utf-8', 'latin-1', 'cp1251'] # –°–ø–∏—Å–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø—Ä–æ–±—ã
    for encoding in encodings_to_try:
        try:
            text = file_bytes.decode(encoding)
            logger.info(f"ChatID: {chat_id} | –§–∞–π–ª '{doc.file_name}' —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é {encoding}.")
            break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        except UnicodeDecodeError:
            logger.warning(f"ChatID: {chat_id} | –§–∞–π–ª '{doc.file_name}' –Ω–µ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ {encoding}.")
        except Exception as e:
            logger.error(f"ChatID: {chat_id} | –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{doc.file_name}' —Å {encoding}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏

    if text is None:
        logger.error(f"ChatID: {chat_id} | –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª '{doc.file_name}' –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–¥–∏—Ä–æ–≤–æ–∫: {encodings_to_try}")
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{doc.file_name}'. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {', '.join(encodings_to_try)}.")
        return

    MAX_FILE_CHARS = 50000 # –£–≤–µ–ª–∏—á–∏–ª –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    truncated = text
    warning_msg = ""
    if len(text) > MAX_FILE_CHARS:
        truncated = text[:MAX_FILE_CHARS]
        warning_msg = f"\n\n(‚ö†Ô∏è –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤–æ–ª–æ–≤)"
        logger.warning(f"ChatID: {chat_id} | –¢–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ '{doc.file_name}' –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_FILE_CHARS} —Å–∏–º–≤–æ–ª–æ–≤.")

    user_caption = update.message.caption if update.message.caption else ""

    # ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ =====
    file_context = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{doc.file_name}':\n```\n{truncated}\n```{warning_msg}"
    if user_caption:
        user_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª '{doc.file_name}' —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: \"{user_caption}\". {file_context}\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
    else:
        user_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª '{doc.file_name}'. {file_context}\n–ß—Ç–æ –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ?"
    # ======================================================

    # –°–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤—ã–π" update, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ handle_message
    fake_update_message = type('obj', (object,), {
        'text': user_prompt,
        'reply_text': update.message.reply_text # –ü–µ—Ä–µ–¥–∞–µ–º –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—Ç–∞
    })
    fake_update = type('obj', (object,), {
        'effective_chat': update.effective_chat,
        'message': fake_update_message
    })

    # –í—ã–∑—ã–≤–∞–µ–º handle_message —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    await handle_message(fake_update, context)


async def setup_bot_and_server(stop_event: asyncio.Event):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("model", model_command))
    application.add_handler(CommandHandler("clear", clear_history))
    application.add_handler(CommandHandler("temp", set_temperature))
    application.add_handler(CommandHandler("search_on", enable_search))
    application.add_handler(CommandHandler("search_off", disable_search))
    application.add_handler(CallbackQueryHandler(select_model_callback))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –Ω–æ–≤—ã–º MIME —Ç–∏–ø–∞–º
    application.add_handler(MessageHandler(
        filters.Document.MimeType(
            ['text/*', 'application/json', 'application/x-python-code', 'application/xml', 'application/javascript', 'application/csv', 'text/csv']
        ), handle_document)
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Document.ALL & ~filters.Document.MimeType(
            ['text/*', 'application/json', 'application/x-python-code', 'application/xml', 'application/javascript', 'application/csv', 'text/csv']
        ), handle_unsupported_document)) # –ù—É–∂–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è handle_unsupported_document

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await application.initialize()
    webhook_url = urljoin(WEBHOOK_HOST, f"/{GEMINI_WEBHOOK_PATH}")
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
    await application.bot.set_webhook(webhook_url, allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
    return application, run_web_server(application, stop_event)

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async def handle_unsupported_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    doc = update.message.document
    mime_type = doc.mime_type if doc.mime_type else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    logger.warning(f"ChatID: {chat_id} | –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {doc.file_name} (MIME: {mime_type})")
    await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–∫–∞ –º–æ–≥—É —á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, .txt, .py, .js, .json, .csv, .xml). –í–∞—à —Ñ–∞–π–ª '{doc.file_name}' –∏–º–µ–µ—Ç —Ç–∏–ø '{mime_type}', –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")


async def run_web_server(application: Application, stop_event: asyncio.Event):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    app = aiohttp.web.Application()
    async def health_check(request):
        return aiohttp.web.Response(text="OK")
    app.router.add_get('/', health_check)

    app['bot_app'] = application
    webhook_path = f"/{GEMINI_WEBHOOK_PATH}"
    app.router.add_post(webhook_path, handle_telegram_webhook)
    logger.info(f"–í–µ–±—Ö—É–∫ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø—É—Ç–∏: {webhook_path}")

    runner = aiohttp.web.AppRunner(app)
    await runner.setup()

    port = int(os.getenv("PORT", "10000"))
    site = aiohttp.web.TCPSite(runner, "0.0.0.0", port)
    try:
        await site.start()
        logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")
        await stop_event.wait()
    finally:
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä...")
        await runner.cleanup()
        logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def handle_telegram_webhook(request: aiohttp.web.Request) -> aiohttp.web.Response:
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    application = request.app.get('bot_app')
    if not application:
        logger.error("–û–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ aiohttp!")
        return aiohttp.web.Response(status=500, text="Internal Server Error: Bot application not configured")

    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        # –ù–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ, –∞ –∂–¥–µ–º –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏—Å—Ç–æ—Ä–∏–∏
        # –û–¥–Ω–∞–∫–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –≤–µ–±—Ö—É–∫—É, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–≥–∞—è.
        # –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –≤–µ–±—Ö—É–∫—É –∫—Ä–∏—Ç–∏—á–Ω–∞, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å asyncio.create_task, –Ω–æ —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ context.chat_data
        await application.process_update(update)
        return aiohttp.web.Response(text="OK", status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫-–∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, —á—Ç–æ–±—ã Telegram –Ω–µ –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—Ç –∂–µ update
        return aiohttp.web.Response(text="OK", status=200)


async def main():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    logging.getLogger('httpx').setLevel(logging.WARNING) # –£–º–µ–Ω—å—à–∞–µ–º —Å–ø–∞–º –æ—Ç httpx –≤ –ª–æ–≥–∞—Ö DDGS
    logging.getLogger('httpcore').setLevel(logging.WARNING) # –£–º–µ–Ω—å—à–∞–µ–º —Å–ø–∞–º –æ—Ç httpcore
    logging.getLogger('google.api_core').setLevel(logging.WARNING) # –£–º–µ–Ω—å—à–∞–µ–º —Å–ø–∞–º –æ—Ç Google API
    logging.getLogger('google.generativeai').setLevel(logging.INFO) # –û—Å—Ç–∞–≤–ª—è–µ–º INFO –¥–ª—è Gemini
    logging.getLogger('duckduckgo_search').setLevel(logging.INFO) # –û—Å—Ç–∞–≤–ª—è–µ–º INFO –¥–ª—è DDGS
    logging.getLogger('PIL').setLevel(logging.INFO) # –£–º–µ–Ω—å—à–∞–µ–º —Å–ø–∞–º –æ—Ç Pillow

    loop = asyncio.get_running_loop()
    stop_event = asyncio.Event()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    try:
        for sig in (signal.SIGINT, signal.SIGTERM):
            loop.add_signal_handler(sig, stop_event.set)
    except NotImplementedError:
        # Windows –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç add_signal_handler –¥–ª—è SIGTERM
        logger.warning("Signal handlers for SIGINT/SIGTERM might not be fully supported on this OS.")
        signal.signal(signal.SIGINT, lambda s, f: stop_event.set())
        # SIGTERM –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ SIGINT (Ctrl+C) –¥–æ–ª–∂–µ–Ω

    application = None
    web_server_task = None
    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        application, web_server_coro = await setup_bot_and_server(stop_event)
        web_server_task = asyncio.create_task(web_server_coro)
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥—É —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
        await stop_event.wait()

    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    finally:
        logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

        # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (—á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ)
        if not stop_event.is_set():
             stop_event.set() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞

        if web_server_task and not web_server_task.done():
             logger.info("–û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
             try:
                 # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                 await asyncio.wait_for(web_server_task, timeout=10.0)
                 logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
             except asyncio.TimeoutError:
                 logger.warning("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥, –æ—Ç–º–µ–Ω—è—é –∑–∞–¥–∞—á—É...")
                 web_server_task.cancel()
                 try:
                     await web_server_task # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
                 except asyncio.CancelledError:
                     logger.info("–ó–∞–¥–∞—á–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                 except Exception as e:
                     logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
             except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏/–æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

        # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        if application:
            logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ (shutdown)...")
            await application.shutdown()
            logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            logger.warning("–û–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –±—ã–ª –ø–æ—Ç–µ—Ä—è–Ω.")

        # 3. –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞—á (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        if tasks:
            logger.info(f"–û—Ç–º–µ–Ω—è—é –æ—Å—Ç–∞–≤—à–∏–µ—Å—è {len(tasks)} –∑–∞–¥–∞—á...")
            [task.cancel() for task in tasks]
            try:
                await asyncio.gather(*tasks, return_exceptions=True)
                logger.info("–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á: {e}")


        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True)